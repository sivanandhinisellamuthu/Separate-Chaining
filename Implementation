import java.util.LinkedList;

class HashTable {
    private int size;
    private LinkedList<Entry>[] table;

    // Constructor to initialize the hash table with empty buckets
    public HashTable(int size) {
        this.size = size;
        table = new LinkedList[size];
        for (int i = 0; i < size; i++) {
            table[i] = new LinkedList<>();
        }
    }

    // Hash function (Division method)
    private int hashFunction(int key) {
        return key % size;
    }

    // Insert key-value pair into the hash table
    public void insert(int key, String value) {
        int index = hashFunction(key);
        LinkedList<Entry> bucket = table[index];

        // Check if the key already exists, update value if found
        for (Entry entry : bucket) {
            if (entry.key == key) {
                entry.value = value;
                return;
            }
        }

        // If key doesn't exist, add new key-value pair
        bucket.add(new Entry(key, value));
    }

    // Search for a value by key
    public String search(int key) {
        int index = hashFunction(key);
        LinkedList<Entry> bucket = table[index];

        // Traverse the bucket to find the key
        for (Entry entry : bucket) {
            if (entry.key == key) {
                return entry.value;
            }
        }

        return null; // Return null if key not found
    }

    // Delete a key-value pair from the hash table
    public void delete(int key) {
        int index = hashFunction(key);
        LinkedList<Entry> bucket = table[index];

        // Remove the entry with the matching key
        bucket.removeIf(entry -> entry.key == key);
    }

    // Entry class to represent key-value pairs
    private static class Entry {
        int key;
        String value;

        Entry(int key, String value) {
            this.key = key;
            this.value = value;
        }
    }

    // Example usage
    public static void main(String[] args) {
        HashTable hashTable = new HashTable(10);
        
        // Insert key-value pairs
        hashTable.insert(15, "John");
        hashTable.insert(25, "Jane");
        hashTable.insert(35, "Jack");
        
        // Search for keys
        System.out.println(hashTable.search(25)); // Output: Jane
        System.out.println(hashTable.search(35)); // Output: Jack
        
        // Delete a key
        hashTable.delete(15);
        System.out.println(hashTable.search(15)); // Output: null
    }
}
